name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: ["**"]
  
jobs:
  build:
    name: Build up-client-vsomeip-cpp and dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Create default Conan profile
        run: conan profile detect

      - name: Conan cache archive
        id: conan-cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-conan-cache
          path: conan-cache.tgz

      - name: Restore conan cache from archive
        if: ${{ steps.conan-cache.outputs.cache-hit == 'true' }}
        shell: bash
        run: |
          conan cache restore conan-cache.tgz
          rm conan-cache.tgz

      - name: Fetch up-client-vsomeip-cpp
        uses: actions/checkout@v4
        with:
          path: up-client-vsomeip-cpp

      - name: Build up-client-vsomeip-cpp with tests
        shell: bash
        run: |
          cd up-client-vsomeip-cpp
          conan install . --build=missing
          cd build
          cmake -S .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON
          cmake --build .

  test:
    name: Run up-client-vsomeip-cpp tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: up-client-vsomeip-cpp/build

  lint:
    name: Lint C++ sources
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Get build commands
        uses: actions/download-artifact@v4
        with:
          name: compile-commands

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Create default Conan profile
        run: conan profile detect

      - name: Conan cache archive
        id: conan-cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-conan-cache
          fail-on-cache-miss: true
          path: conan-cache.tgz

      - name: Restore conan cache from archive
        shell: bash
        run: |
          conan cache restore conan-cache.tgz

      - name: Fetch up-client-vsomeip-cpp
        uses: actions/checkout@v4
        with:
          path: up-client-vsomeip-cpp

      - name: Run linters on source
        id: source-linter
        uses: cpp-linter/cpp-linter-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repo-root: up-client-vsomeip-cpp
          ignore: 'test'
          style: 'file' # read .clang-format for configuration
          tidy-checks: '' # Read .clang-tidy for configuration
          database: compile_commands.json
          #extra-args: '-std=c++17 -cxx-isystem/usr/include/c++/12/ -Iinclude ${{ steps.pkgs.outputs.includes }}'
          #version: 18

      - name: Run linters on tests
        id: test-linter
        uses: cpp-linter/cpp-linter-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repo-root: up-client-vsomeip-cpp
          ignore: 'src|include'
          style: 'file' # read .clang-format for configuration
          tidy-checks: '' # Read .clang-tidy for configuration
          database: compile_commands.json
          #extra-args: '-std=c++17 -cxx-isystem/usr/include/c++/12/ -Iinclude -Itest/include ${{ steps.pkgs.outputs.includes }}'
          #version: 18

      - name: Report lint failure
        if: steps.source-linter.outputs.checks-failed > 0 || steps.test-linter.outputs.checks-failed > 0
        run: |
          exit 1

  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: [build, test]
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'