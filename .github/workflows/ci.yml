name: CI

on:
  push:
    branches: [ UT_Changes ]
  pull_request:
    branches: ["UT_Changes"]
  
jobs:
  build-up-cpp:
    name: Build up-cpp
    runs-on: ubuntu-latest
    env:
      UP_CPP_Repo: https://github.com/eclipse-uprotocol/up-cpp.git
      UP_CPP_Cache_PFX: up-cpp-conan2
    outputs:
      UP_CPP_Cache: ${{ env.UP_CPP_Cache_PFX }}-${{ steps.up-cpp-head.outputs.UP_CPP_HEAD }}

    steps:
      - name: Check remote head hash
        id: up-cpp-head
        shell: bash
        run: '{ echo -n "UP_CPP_HEAD="; git ls-remote "$UP_CPP_Repo" HEAD | cut -f1; } | tee -a "$GITHUB_OUTPUT"'

      - name: Cache conan artifacts
        id: cache-conan2
        uses: actions/cache@v4
        with:
          key: ${{ env.UP_CPP_Cache_PFX }}-${{ steps.up-cpp-head.outputs.UP_CPP_HEAD }}
          path: |
            ~/.conan2

      - name: Install Conan
        if: ${{ steps.cache-conan2.outputs.cache-hit != 'true' }}
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Create default Conan profile
        if: ${{ steps.cache-conan2.outputs.cache-hit != 'true' }}
        run: conan profile detect

      # NOTE: Checks out the head revision we found using ls-remote above
      #       to avoid race conditions resulting in mismatch between cache
      #       and contents of repo.
      - name: Clone up-cpp repo
        if: ${{ steps.cache-conan2.outputs.cache-hit != 'true' }}
        shell: bash
        env:
          UP_CPP_HEAD: ${{ steps.up-cpp-head.outputs.UP_CPP_HEAD }}
        run: |
          git clone "$UP_CPP_Repo"
          cd up-cpp && git checkout v0.1.2-dev
          git submodule update --init --recursive

      - name: Create up-cpp Conan package
        if: ${{ steps.cache-conan2.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd up-cpp
          conan create . --build=missing

      - name: Clean up conan build files
        if: ${{ steps.cache-conan2.outputs.cache-hit != 'true' }}
        run: conan cache clean '*'

  build-up-client-vsomeip-cpp:
    name: Build up-client-vsomeip-cpp
    needs: [ build-up-cpp ]
    runs-on: ubuntu-latest
    env:
      UP_CPP_Cache: ${{ needs.build-up-cpp.outputs.UP_CPP_Cache }}

    steps:
      # Note: will never update here since it will always match from previous job
      - name: Get cached up-cpp conan artifacts
        uses: actions/cache@v4
        with:
          key: ${{ env.UP_CPP_Cache }}
          path: |
            ~/.conan2

      - uses: actions/checkout@v2

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install up-client-vsomeip-cpp dependencies
        run: |
          cd /home/runner/work/up-client-vsomeip-cpp/up-client-vsomeip-cpp
          conan install . --build=missing

      - name: Build and install up-client-vsomeip-cpp
        shell: bash
        run: |  
          mkdir build
          cd build
          cmake -S .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON
          cmake --build .

  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: [ build-up-cpp, build-up-client-vsomeip-cpp ]
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'
